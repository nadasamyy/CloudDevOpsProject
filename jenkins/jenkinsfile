pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'nadasamy181/my-app'
        DOCKER_TAG = 'latest'
        SONARQUBE_SCANNER_HOME = tool name: 'SonarQube Scanner', type: 'ToolLocation'
        // Remove or replace with an existing JDK version
      //  JAVA_HOME = '/path/to/your/java' // Update this with a valid JDK path if needed
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/nadasamyy/CloudDevOpsProject.git'
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    bat './gradlew test'
                }
            }
        }

        stage('Build JAR') {
            steps {
                script {
                    bat './gradlew build'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    bat 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    echo "Pushing Docker image ${DOCKER_IMAGE}:${DOCKER_TAG} to Docker registry"
                    bat 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    echo "Running SonarQube analysis"
                    bat '"${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner"'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "Deploying Docker image to Kubernetes"
                    bat 'kubectl apply -f k8s/deployment.yaml'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up after pipeline'
            cleanWs()
        }

        success {
            echo 'Pipeline succeeded!'
        }

        failure {
            echo 'Pipeline failed!'
        }
    }
}
