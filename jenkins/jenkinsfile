pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'nadasamy181/my-app'
    }

    stages {
        stage('Git Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    bat './gradlew test'  // Running Gradle test tasks
                }
            }
        }

        stage('Build JAR') {
            steps {
                script {
                    bat './gradlew build'  // Running Gradle build tasks
                }
            }
        }

        stage('SonarQube Analysis') {
            tools {
                jdk 'JDK17'  // Ensure JDK17 is configured in Jenkins Global Tool Configuration
            }
            steps {
                dir('FinalProjectCode') {  // Adjusted to point to the root of your project structure
                    withCredentials([string(credentialsId: 'sonar-credentials', variable: 'TOKEN')]) {
                        bat """
                            java -version
                            .\\gradlew.bat sonarqube \
                            -Dsonar.projectKey=java-project \
                            -Dsonar.projectName=java_application \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.token=%TOKEN%
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    bat 'docker build -t %DOCKER_REGISTRY%/%DOCKER_IMAGE%:%BUILD_NUMBER% .'
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat 'docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD% %DOCKER_REGISTRY%'
                        bat 'docker push %DOCKER_REGISTRY%/%DOCKER_IMAGE%:%BUILD_NUMBER%'
                    }
                }
            }
        }

        // **Deployment Stage**
        stage('Deploy to Minikube') {
            steps {
                script {
                    // Ensure Minikube Docker environment is set
                    bat 'minikube -p minikube docker-env | set'

                    // Ensure the Docker image is available for Minikube
                    bat 'docker build -t nadasamy181/my-app:v1 .'

                    // Apply the Kubernetes deployment
                    bat 'kubectl apply -f deployment.yml'

                    // Verify the deployment
                    bat 'kubectl get deployments'
                    bat 'kubectl get pods'
                    bat 'kubectl get services'
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up Docker images to save space
                bat 'docker rmi %DOCKER_REGISTRY%/%DOCKER_IMAGE%:%BUILD_NUMBER%' 
            }
        }
        failure {
            // Add notification logic for failed pipeline (e.g., email, Slack)
            echo 'Pipeline failed!'
        }
        success {
            // Add notification logic for successful pipeline (e.g., email, Slack)
            echo 'Pipeline succeeded!'
        }
    }
}
