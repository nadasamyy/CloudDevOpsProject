pipeline {
    agent any
    environment {
        // Set environment variables for Docker image name and version
        DOCKER_IMAGE_NAME = 'nadasamy181/my-app'
        DOCKER_IMAGE_VERSION = 'latest'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from SCM (Source Control Management)
                checkout scm
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    // Run unit tests using Gradle
                    bat './gradlew test'
                }
            }
        }

        stage('Build JAR') {
            steps {
                script {
                    // Build the project and create a JAR file using Gradle
                    bat './gradlew build'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using the Dockerfile in the current directory
                    echo "Building Docker image ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}"
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION} ."
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    // Log in to Docker Hub
                    echo "Logging into Docker..."
                    sh 'docker login --username=nadasamy181'

                    // Push the Docker image to Docker Hub (or any other registry)
                    echo "Pushing Docker image to registry..."
                    sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Placeholder for SonarQube analysis (can be configured as needed)
                    echo "Running SonarQube analysis (this is just a placeholder)"
                }
            }
        }
    }
    post {
        always {
            // Clean up any temporary files or actions
            echo "Cleaning up after pipeline"
        }
        success {
            echo "Pipeline finished successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
